CREATE TABLE IF NOT EXISTS Fabricant (
    nom varchar(255) PRIMARY KEY
);
 
CREATE TABLE IF NOT EXISTS Genre (
    nom varchar(255) PRIMARY KEY
);
 
CREATE TABLE IF NOT EXISTS Editeur (
    id SERIAL PRIMARY KEY,
    nom varchar(255) UNIQUE,
    siegeSocial varchar(255)
);

CREATE TABLE IF NOT EXISTS Client (
    pseudo varchar(80) PRIMARY KEY,
    dateNaissance date,
    adresseFacturation varchar(255),
    email varchar(255) UNIQUE
);

CREATE TABLE IF NOT EXISTS Article (
    id Serial PRIMARY KEY,
    nom varchar(255),
    description text,
    dateSortie date,
    prix decimal(10, 2),
    note decimal(3, 2),
    CONSTRAINT check_dateSortie_prix_null CHECK (
        (dateSortie IS NULL AND prix IS NULL) OR (dateSortie IS NOT NULL AND prix IS NOT NULL)
    ),
    CONSTRAINT check_note_after_dateSortie CHECK (
        note IS NULL or dateSortie < CURRENT_DATE
    )
);



CREATE TABLE IF NOT EXISTS Console (
    nom varchar(255) PRIMARY KEY,
    anneeParution int,
    nomFabricant varchar(255),
    FOREIGN KEY (nomFabricant)
        REFERENCES Fabricant(nom)
        ON UPDATE CASCADE           -- Si le nom du fabricant change, répercuter le changement dans la table Console
        ON DELETE SET NULL           -- Si le fabricant est supprimé, conserver la console mais sans fabricant
);


CREATE TABLE IF NOT EXISTS JeuVideo (
    idArticle int PRIMARY KEY REFERENCES Article(id),
    ageMinimum int,
    idEditeur int,
    FOREIGN KEY (idEditeur)
        REFERENCES Editeur(id)
        ON UPDATE CASCADE            -- Si l'identifiant de l'éditeur change, répercuter le changement
        ON DELETE SET NULL           -- Si l'éditeur est supprimé, conserver le jeu mais sans éditeur
);


CREATE TABLE IF NOT EXISTS DLC (
    idArticle int PRIMARY KEY REFERENCES Article(id),
    necessiteJeuDeBase boolean,
    idJeuVideo int,
    FOREIGN KEY (idJeuVideo)
        REFERENCES JeuVideo(idArticle)
        ON UPDATE CASCADE            -- Si l'identifiant du jeu de base change, répercuter le changement
        ON DELETE CASCADE            -- Si le jeu de base est supprimé, supprimer également le DLC
);


CREATE TABLE IF NOT EXISTS Article_Console (
    idArticle int REFERENCES Article(id)
        ON UPDATE CASCADE            -- Si l'identifiant de l'article change, répercuter le changement
        ON DELETE CASCADE,           -- Si l'article est supprimé, supprimer également l'association avec la console
    nomConsole varchar(255) REFERENCES Console(nom)
        ON UPDATE CASCADE            -- Si le nom de la console change, répercuter le changement
        ON DELETE CASCADE,           -- Si la console est supprimée, supprimer l'association avec l'article
    PRIMARY KEY (idArticle, nomConsole)
);


CREATE TABLE IF NOT EXISTS Client_Article (
    pseudoClient varchar(80) REFERENCES Client(pseudo)
        ON UPDATE CASCADE            -- Si le pseudo du client change, répercuter le changement
        ON DELETE CASCADE,           -- Si le client est supprimé, supprimer également les achats associés
    idArticle int REFERENCES Article(id)
        ON UPDATE CASCADE            -- Si l'identifiant de l'article change, répercuter le changement
        ON DELETE CASCADE,           -- Si l'article est supprimé, supprimer également les achats associés
    dateAchat date,
    PRIMARY KEY (pseudoClient, idArticle)
);


CREATE TABLE IF NOT EXISTS JeuVideo_Genre (
    idJeuVideo int REFERENCES JeuVideo(idArticle)
        ON UPDATE CASCADE            -- Si l'identifiant du jeu vidéo change, répercuter le changement
        ON DELETE CASCADE,           -- Si le jeu vidéo est supprimé, supprimer également l'association avec le genre
    nomGenre varchar(255) REFERENCES Genre(nom)
        ON UPDATE CASCADE            -- Si le nom du genre change, répercuter le changement
        ON DELETE CASCADE,           -- Si le genre est supprimé, supprimer l'association avec le jeu vidéo
    PRIMARY KEY (idJeuVideo, nomGenre)
);
